// module
#include "highdpi.hsp"
#include "KeyHook.hsp"
#uselib "shell32"
    #func ExtractIcon "ExtractIconA"        int, sptr, int
    #func DragAcceptFiles "DragAcceptFiles" int, int
    #func DragQueryFile   "DragQueryFileA"  int, int, int, int
    #func DragQueryPoint  "DragQueryPoint"  int, int
    #func DragFinish      "DragFinish"      int
#uselib "user32"
    #func DrawIcon "DrawIcon"               int, int, int, int
    #func GetClientRect "GetClientRect"     int, int
    #func SetParent "SetParent"             int, int
    #func SetWindowLong "SetWindowLongA"    int, int, int
#uselib "gdi32"
    #func BitBlt "BitBlt"                   int, int, int, int, int, int, int, int, int
    #cfunc CreateDC "CreateDCA"             sptr, sptr, sptr, int
    #func DeleteDC "DeleteDC"               int
    #cfunc GetStockObject "GetStockObject"  int

#module
    #define global ctype cAng(%1, %2) 2.0*M_PI/(%1)*(%2)
    #define global ctype pR(%1, %2) sqrt(powf(%1, 2) + powf(%2, 2))
    #define global ctype pCos(%1) cos(%1 - M_PI/2)
    #define global ctype pSin(%1) sin(%1 - M_PI/2)
    #defcfunc pT int x, int y
        ang = atan(y, x) + M_PI/2
        if (ang < 0) {
            ang = 2.0*M_PI + ang
        }
        return ang
    #defcfunc ls array m, int i
        foreach m
            if (m(cnt) == i) { return cnt }
        loop
        return -1
    #deffunc iArrDel array m, int i
        n = length(m) - 1
        dim arr, n
        ic = 0
        foreach m
            if (m(cnt) == i) {
                continue
            } else {
                arr(ic) = m(cnt)
            }
            ic++
        loop
        dim m, n
        foreach arr
        	m(cnt) = arr(cnt)
        loop
        return

    #deffunc sArrDel array m, str i
        n = length(m) - 1
        sdim arr, n
        ic = 0
        foreach m
            if (m(cnt) == i) {
                continue
            } else {
                arr(ic) = m(cnt)
            }
            ic++
        loop
        sdim m, n
        foreach arr
        	m(cnt) = arr(cnt)
        loop
        return
#global

// definition
#define WM_DROPFILES    0x00000233
#define WM_NOTIFY       0x0000004E
#define TCN_SELCHANGE   0xFFFFFDD9
#define TCM_GETCURSEL   0x0000130B
#define SRCCOPY         0x00CC0020
#define CAPTUREBLT      0x40000000
#define APPDAT          "app.dat"
#define SETDAT          "setting.dat"
#enum STAT_YET = 0
#enum STAT_INI
#enum STAT_MID
#enum STAT_END
iconHalfSize = 16
dx = ginfo_dispx
dy = ginfo_dispy
cx = dx/2
cy = dy/2

// pre-process
keySwitch = 0
openSetting = STAT_YET
keyAddition = STAT_YET
keyDeletion = STAT_YET
transition = -1
selecting = -1
wId = 0
appDatContents = ""
setDatContents = ""

// inital value
blurBlend = 128
blurDepth = 3
selectingBlend = 40
bigIconSize = 40
sepHalfLength = 5
triggerKey = 160, 162
triggerKeyName = "Shift", "Ctrl"
triggerKeyPush = 0, 0
darkBlend = 50
fontSize = 14

// file io
//      setting.dat
notesel setDatContents
exist SETDAT
if (strsize == -1) {
    notesave SETDAT
} else {
    noteload SETDAT
    if (setDatContents == "") {
        dialog "setting.dat is empty"
        end
    } else {
        repeat notemax
            noteget noteBuf, cnt
            // hoken
            if (noteBuf == "") { break }
            // for debug
            noteBuf = strtrim(noteBuf, 3)
            split noteBuf, "//", noteBuf, dummy
            switch cnt
                // blurBlend
                case 0
                    blurBlend = int(noteBuf)
                    swbreak
                // blurDepth
                case 1
                    blurDepth = int(noteBuf)
                    swbreak
                // selectingBlend
                case 2
                    selectingBlend = int(noteBuf)
                    swbreak
                // bigIconSize
                case 3
                    bigIconSize = int(noteBuf)
                    swbreak
                // sepHalfLength
                case 4
                    sepHalfLength = int(noteBuf)
                    swbreak
                // triggerKey
                case 5
                    split noteBuf, ",", sBuf
                    dim triggerKey, length(sBuf)
                    dim triggerKeyName, length(sBuf)
                    dim triggerKeyPush, length(sBuf)
                    foreach sBuf
                        split sBuf(cnt), ":", iBuf, triggerKeyName(cnt)
                        triggerKey(cnt) = int(iBuf)
                        triggerKeyPush(cnt) = 0
                    loop
                    swbreak
                // darkBlend
                case 6
                    darkBlend = int(noteBuf)
                    swbreak
                // fontSize
                case 7
                    fontSize = int(noteBuf)
                    swbreak
            swend
        loop
    }
}

//      app.dat
notesel appDatContents
exist APPDAT
appPath = ""
if (strSize == -1) {
    notesave APPDAT
} else {
    noteload APPDAT
    if (appDatContents == "") {
        end
    } else {
        sdim appPath, notemax
        sdim appName, notemax
        repeat notemax
            noteget noteBuf, cnt
            // hoken
            if (noteBuf == "") { break }
            split noteBuf, "|", appPath(cnt), appName(cnt)
        loop
    }
}

// load icon
appNum = length(appPath)
dim iconHandle, appNum
repeat appNum
    ExtractIcon hInstance, appPath(cnt), 0
    iconHandle(cnt) = stat
    if (stat == 0) : dialog "loading failed."
loop

appR = (0.05*appNum + 0.1) * cy
pageMsgPos = cy - appR - (iconHalfSize*2 + bigIconSize/2) - fontSize - 10
launcherMsgPos = cy + appR + (iconHalfSize*2 + bigIconSize/2) + 10

// screen
bgscr 0, dx, dy, screen_hide, 0, 0  // main
buffer 1, dx, dy                    // for screen shot
buffer 2, dx, dy                    // for blended screen
buffer 3, dx, dy                    // for colored screen
    dim appColor, appNum
    repeat appNum
        DrawIcon hdc, 0, 0, iconHandle(cnt)
        pos 0, 0 : gzoom 1, 1, 3, 0, 0, 32, 32, 1
        pget 0, 0
        appColor(cnt) = ginfo_r << 16 | ginfo_g << 8 | ginfo_b
    loop

buffer 4                            // for drawing icon
buffer 5                            // for resizing icon
buffer 6, dx, dy                    // for dark screen
    color : boxf

// setting
screen 7, 700, 480, screen_hide or screen_fixedsize
    title "setting"
    syscolor 15 : boxf
    winobj "systabcontrol32", "", 0, 0x52000000, ginfo_winx, ginfo_winy
    hTab = objinfo(stat, 2)
    sendmsg hTab, 0x30, GetStockObject(17)
    tabTitle = "Common", "Keys", "Apps"
    dim rect, 4
    foreach tabTitle
        tcitem = 1, 0, 0, varptr(tabTitle(cnt))
        sendmsg hTab, 0x1307, cnt, varptr(tcitem)
        GetClientRect hTab, varptr(rect)
        sendmsg hTab, 0x1328, 0, varptr(rect)
    loop
    oncmd gosub *tabNotify, WM_NOTIFY

// setting - Common
bgscr 8, rect(2) - rect(0), rect(3) - rect(1), screen_hide, rect(0), rect(1)
    SetWindowLong hwnd, -16, 0x40000000
    SetParent hwnd, hTab
    color $20, $20, $20 : boxf
    font msgothic, 20
    color $FF, $FF, $FF
    pos 20,  20 : mes "Animation"
    pos 20, 150 : mes "Selection"
    font msgothic, 16
    color $C0, $C0, $C0
    pos  50,  50 : mes "blurBlend"
    pos  50,  80 : mes "blurDepth"
    pos  50, 110 : mes "darkBlend"
    pos  50, 180 : mes "selectingBlend"
    pos  50, 210 : mes "bigIconSize"
    pos  50, 240 : mes "sepHalfLength"
    pos  50, 270 : mes "fontSize"
    font msgothic, 14
    objmode objmode_usefont
    blurBlendIn = blurBlend
    blurDepthIn = blurDepth
    darkBlendIn = DarkBlend
    selectingBlendIn = selectingBlend
    bigIconSizeIn = bigIconSize
    sepHalfLengthIn = sepHalfLength
    fontSizeIn = fontSize
    opx = 200
    osx = 50
    pos opx,  48 : input blurBlendIn, osx, 20, 3
    blurBlendInId = stat
    pos opx,  78 : input blurDepthIn, osx, 20, 2
    blurDepthInId = stat
    pos opx, 108 : input darkBlendIn, osx, 20, 3
    darkBlendInId = stat
    pos opx, 178 : input selectingBlendIn, osx, 20, 3
    selectingBlendInId = stat
    pos opx, 208 : input bigIconSizeIn, osx, 20, 3
    bigIconSizeInId = stat
    pos opx, 238 : input sepHalfLengthIn, osx, 20, 3
    sepHalfLengthInId = stat
    pos opx, 268 : input fontSizeIn, osx, 20, 3
    fontSizeInId = stat

// setting - Keys
bgscr 9, rect(2)-rect(0), rect(3)-rect(1), screen_hide, rect(0), rect(1)
    SetWindowLong hwnd, -16, 0x40000000
    SetParent hwnd, hTab
    color $20, $20, $20 : boxf
    color $FF, $FF, $FF
    font msgothic, 14
    objmode objmode_usefont
    objsize 100, 30
    pos 20,  20 : button gosub "Add", *addTriggerKey
    pos 20,  70 : button gosub "Delete", *deleteTriggerKey
    keyListIndex = -1
    keyList = ""
    objsize ginfo_winx-40, ginfo_winy-120-20
    pos 20, 120 : listbox keyListIndex, 0, keyList
    keyListId = stat
    gosub *updateKeyList

// setting - Apps
bgscr 10, rect(2)-rect(0), rect(3)-rect(1), screen_hide, rect(0), rect(1)
    SetWindowLong hwnd, -16, 0x40000000
    SetParent hwnd, hTab
    DragAcceptFiles hwnd, 1
    color $20, $20, $20 : boxf
    oncmd gosub *dropFiles, WM_DROPFILES

gsel 8, 1

gsel 0, 0

khHookLL *onKeyHook
onexit gosub *exitProcess

goto *main



// label
*pre




*main
    if (openSetting == STAT_INI) {

        cx = (rect(2)-rect(0)) / 2
        cy = (rect(3)-rect(1)) / 2
        appR = cy - 70
        selecting = -2

        gsel 10, 0
        color $20, $20, $20 : boxf
        gosub *drawApps

        gosub *showSetting

    } else : if (openSetting == STAT_MID) {

        // trigger key addition
        if (keyAddition == STAT_INI) {
            gsel 9, 0
            font msgothic, 16
            color $FF, $FF, $FF
            pos 150, 25 : mes "Press key to add (ESC -> Cancel)"
            newTriggerKey = 0
            newTriggerKeyName = ""
            keyAddition = STAT_MID
        } else : if (keyAddition == STAT_END) {
            // adding trigger key
            if (newTriggerKey != -1) {
                if (ls(triggerKey, newTriggerKey) == -1) {
                    triggerKey(length(triggerKey)) = newTriggerKey
                    triggerKeyName(length(triggerKeyName)) = newTriggerKeyName
                    dim triggerKeyPush, length(triggerKeyPush)+1
                    // redraw trigger key list
                    keyList += newTriggerKeyName + " : " + str(newTriggerKey) + "\n"
                    gosub *updateKeyList
                }
            }
            color $20, $20, $20 : boxf 150, 20, 450, 50
            keyListIndex = -1
            keyAddition = STAT_YET
        }

        // trigger key deletion
        if (keyDeletion == STAT_MID) {
            if ((keyListIndex != -1) and (keyListIndex < length(triggerKey)) and (length(triggerKey) > 1)) {
                iArrDel triggerKey, triggerKey(keyListIndex)
                sArrDel triggerKeyName, triggerKeyName(keyListIndex)
                dim triggerKeyPush, length(triggerKeyPush)-1
                notesel keyList
                notedel keyListIndex
                gosub *updateKeyList
            }
            keyListIndex = -1
            keyDeletion = STAT_YET
        }

        // app addition
        if (appAddition == STAT_INI) {
            redraw 0
                gsel 10, 0
                color $20, $20, $20 : boxf
                gosub *drawApps
            redraw 1
            appAddition = STAT_YET
        }
    
    } else : if (openSetting == STAT_END) {

        cx = dx/2
        cy = dy/2
        appR = (0.05*appNum + 0.1) * cy
        selecting = -1
        openSetting = STAT_YET

    } else {
        if (keySwitch) {
            redraw 0
                gosub *key1
            redraw 1
        } else {
            gosub *key0
        }
    }
    wait 1
    goto *main


*addTriggerKey
    keyAddition = STAT_INI
    return



*deleteTriggerKey
    keyDeletion = STAT_MID
    if (keyAddition == STAT_MID) {
        newTriggerKey = -1
        keyAddition = STAT_END
    }
    return



*updateKeyList
    keyList = ""
    foreach triggerKey
        keyList += triggerKeyName(cnt) + " : " + str(triggerKey(cnt)) + "\n"
    loop
    objprm keyListId, keyList
    return



*showSetting
    gsel 0, -1
    gsel 7, 2
    openSetting = STAT_MID
    return



*key0
    transition = -1
    gsel 0, -1
    if (selecting != -1) {
        exec appPath(selecting)
        selecting = -1
    }
    return



*key1
    if (transition == -1) {
        // screen shot
        gsel 1, 0
        hdcScreen = CreateDC("DISPLAY", 0, 0, 0)
        BitBlt hdc, 0, 0, dx, dy, hdcScreen, 0, 0, SRCCOPY | CAPTUREBLT
        DeleteDC hdcScreen

        // copy to launcher-screen
        gsel 0, 0
        gmode
        pos 0, 0 : gcopy 1, 0, 0, dx, dy

        // show launcer-screen
        transition = 0
        mouse cx, cy
        gsel 0, 2
    }
    if (transition <= blurDepth) {
        // blur
        gsel 0, 0
        gmode gmode_alpha, dx, dy, blurBlend
        pos 1, 0 : gcopy 0, 0, 0, dx, dy
        pos 0, 0 : gcopy 0, 2, 0, dx, dy
        pos 0, 1 : gcopy 0, 0, 0, dx, dy
        pos 0, 0 : gcopy 0, 0, 2, dx, dy

        // blend dark screen
        gmode gmode_alpha, dx, dy, darkBlend
        pos 0, 0 : gcopy 6, 0, 0, dx, dy

        // copy to buffer 1
        gsel 1, 0
        gmode
        pos 0, 0 : gcopy 0, 0, 0, dx, dy
        gsel 0, 0
        transition++

    } else : if (transition > blurDepth) {
        // detect app selection
        mouseRad = pT(mousex-cx, mousey-cy)
        if (pR(mousex-cx, mousey-cy) >= appR) {
            if ((cAng(appNum*2, appNum*2-1) < mouseRad) | (mouseRad < cAng(appNum*2, 1))) {
                selecting = 0
            } else {
                repeat appNum-1
                    if ((cAng(appNum*2, cnt*2+1) < mouseRad) & (mouseRad < cAng(appNum*2, cnt*2+3))) { selecting = cnt + 1 }
                loop
            }
        } else { selecting = -1 }

        // check pressing S key
        getkey sKey, 83
        if (sKey) {
            transition = -1
            openSetting = 1
        }

        // screen blend
        gsel 0, 0
        gmode
        pos 0, 0 : gcopy 1, 0, 0, dx, dy

        gosub *drawApps
    }
    return



*drawApps
    // draw center circle
    color $80, $80, $80
    circle cx-appR, cy-appR, cx+appR, cy+appR, 0
    color $ff, $ff, $ff

    // draw info (debug)
    ;font msgothic, 16
    ;pos 0,   0 : mes "mouse = (" + mousex + ", " + mousey + ")"
    ;pos 0,  20 : mes "ginfo_disp = (" + dx + ", " + dy + ")"
    ;pos 0,  40 : mes "polar R = " + pR(mousex-cx, mousey-cy)
    ;pos 0,  60 : mes "polar T = " + mouseRad
    ;pos 0,  80 : mes "selecting = " + selecting
    ;pos 0, 100 : mes "appR = " + appR

    // draw center to mouse position
    ;line cx, cy, mousex, mousey

    if (selecting < 0) {  // app list view
        repeat appNum
            // draw icon
            DrawIcon hdc, cx-iconHalfSize + pCos(cAng(appNum, cnt))*appR, cy-iconHalfSize + pSin(cAng(appNum, cnt))*appR, iconHandle(cnt)

            // draw separation line
            line cx + pCos(cAng(appNum*2, cnt*2-1))*(appR-sepHalfLength), cy + pSin(cAng(appNum*2, cnt*2-1))*(appR-sepHalfLength), cx + pCos(cAng(appNum*2, cnt*2-1))*(appR+sepHalfLength), cy + pSin(cAng(appNum*2, cnt*2-1))*(appR+sepHalfLength)

        loop

        // draw message
        if (selecting == -1) {
            font msgothic, 20
            color $FF, $FF, $FF
            pos cx-20/2*6/2, pageMsgPos : mes "Page 1"
            color $90, $90, $90
            pos cx-20/2*27/2, launcherMsgPos : mes "press \"S\" to enter settings"
        }

    } else {  // app selecting view
        
        // preparing to draw big icon
        gsel 4, 0
        color : boxf
        DrawIcon hdc, 0, 0, iconHandle(selecting)
        gsel 5, 0
        gzoom iconHalfSize*2+bigIconSize, iconHalfSize*2+bigIconSize, 4, 0, 0, iconHalfSize*2, iconHalfSize*2, 1
        gsel 3, 0
        color appColor(selecting) >> 16, appColor(selecting) >> 8 & 0xFF, appColor(selecting) & 0xFF : boxf

        // blend background color
        gsel 0, 0
        gmode gmode_alpha, dx, dy, selectingBlend
        pos 0, 0 : gcopy 3, 0, 0, dx, dy

        // draw big icon
        gmode gmode_rgb0
        pos cx-iconHalfSize-bigIconSize/2 + pCos(cAng(appNum, selecting))*appR, cy-iconHalfSize-bigIconSize/2 + pSin(cAng(appNum, selecting))*appR
        gcopy 5, 0, 0, iconHalfSize*2+bigIconSize, iconHalfSize*2+bigIconSize

        // draw message
        font msgothic, fontSize
        color $FF, $FF, $FF
        pos cx-fontSize/2*strlen(appName(selecting))/2, launcherMsgPos : mes appName(selecting)

        // draw selecting line
        ;color $40, $40, $40
        ;line cx, cy, cx + pCos(cAng(appNum*2, selecting*2-1))*appR, cy + pSin(cAng(appNum*2, selecting*2-1))*appR
        ;line cx, cy, cx + pCos(cAng(appNum*2, selecting*2+1))*appR, cy + pSin(cAng(appNum*2, selecting*2+1))*appR
    }
    return



*onKeyHook
    // press esc to exit
    if (keyAddition == STAT_MID) {

        if (khKeyCode == 27) {
            newTriggerKey = -1
        } else {  // not esc key
            newTriggerKey = khKeyCode
            newTriggerKeyName = khKeyName
        }
        keyAddition == STAT_END

    } else : if (keyAddition == STAT_YET) {

        // trigger key check
        foreach triggerKey
            if (khKeyCode == triggerKey(cnt)) {
                if (khStat == 0) {  // pushed
                    triggerKeyPush(cnt) = 1
                } else : if (khStat == 2) {  // released
                    triggerKeyPush(cnt) = 0
                }
            }
        loop

        // get AND OR
        keyPushAnd = 1
        keyPushOr = 0
        foreach triggerKeyPush
            if (triggerKeyPush(cnt)) {
                keyPushAnd = keyPushAnd and 1
                keyPushOr = keyPushOr or 1
            } else {
                keyPushAnd = keyPushAnd and 0
                keyPushOr = keyPushOr or 0
            }
        loop

        // judge
        if ((keyPushAnd == 1) and (keySwitch == 0)) {
            keySwitch = 1
        } else : if ((keyPushOr == 0) and (keySwitch == 1)) {
            keySwitch = 0
        }
    }
    return



*dropFiles
    hDrop = wparam
    DragQueryFile hDrop, -1, 0, 0
    dropNum = stat
    sdim dropAppPath, dromNum, 260
    repeat dropNum
        DragQueryFile hDrop, cnt, varptr(dropAppPath(cnt)), 260
        appPath(appNum) = dropAppPath(cnt)
        ExtractIcon hInstance, appPath(appNum), 0
        iconHandle(appNum) = stat
        if (stat == 0) : dialog "loading failed."
        appNum++
    loop
    appAddition = STAT_INI
    return



*tabNotify
    dupptr nmhdr, lparam, 12
    if ((nmhdr(0) == hTab) and (nmhdr(2) == TCN_SELCHANGE)) {
        gsel 8 + wId, -1
        sendmsg hTab, TCM_GETCURSEL
        wId = stat
        gsel 8 + wId, 1
        gsel 7, 0
    }
    return



*exitProcess
    // exit setting screen
    if ((iparam == 0) and (wparam == 7)) {
        openSetting = STAT_END
        transition = -1
        gsel 7, -1
    } else {
        end
    }
    return