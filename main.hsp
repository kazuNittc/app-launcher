// module
#include "highdpi.hsp"
#include "KeyHook.hsp"
#uselib "shell32"
    #func ExtractIcon "ExtractIconA" int, sptr, int
#uselib "user32"
    #func DrawIcon "DrawIcon" int, int, int, int
#uselib "gdi32"
    #cfunc CreateDC "CreateDCA" sptr, sptr, sptr, int
    #func DeleteDC "DeleteDC"  int
    #func BitBlt "BitBlt" int, int, int, int, int, int, int, int, int

#module
    #define global ctype cAng(%1, %2) 2.0*M_PI/(%1)*(%2)
    #define global ctype pR(%1, %2) sqrt(powf(%1, 2) + powf(%2, 2))
    #define global ctype pCos(%1) cos(%1 - M_PI/2)
    #define global ctype pSin(%1) sin(%1 - M_PI/2)
    #defcfunc pT int x, int y
        ang = atan(y, x) + M_PI/2
        if (ang < 0) {
            ang = 2.0*M_PI + ang
        }
        return ang
#global

// definition
#define SRCCOPY         0x00CC0020
#define CAPTUREBLT      0x40000000
#define APPDAT          "app.dat"
#define SETDAT          "setting.dat"
iconHalfSize = 16
dx = ginfo_dispx
dy = ginfo_dispy
cx = dx/2
cy = dy/2

defaultSetting = 128, 3, 40, 40, 5

// pre-process
keySwitch = 0
transition = -1
selecting = -1
appDatContents = ""
setDatContents = ""

// inital value
blurBlend = 128
blurDepth = 3
selectingBlend = 40
bigIconSize = 40
sepHalfLength = 5
triggerKey = 160, 162
darkBlend = 50
fontSize = 14

// file io
//      setting.dat
notesel setDatContents
exist SETDAT
if (strsize == -1) {
    notesave SETDAT
} else {
    noteload SETDAT
    if (setDatContents == "") {
        dialog "setting.dat is empty"
        end
    } else {
        repeat notemax
            noteget noteBuf, cnt
            // hoken
            if (noteBuf == "") { break }
            // for debug
            noteBuf = strtrim(noteBuf, 3)
            split noteBuf, "//", noteBuf, dummy
            switch cnt
                // blurBlend
                case 0
                    blurBlend = int(noteBuf)
                    swbreak
                // blurDepth
                case 1
                    blurDepth = int(noteBuf)
                    swbreak
                // selectingBlend
                case 2
                    selectingBlend = int(noteBuf)
                    swbreak
                // bigIconSize
                case 3
                    bigIconSize = int(noteBuf)
                    swbreak
                // sepHalfLength
                case 4
                    sephalfLength = int(noteBuf)
                    swbreak
                // triggerKey
                case 5
                    split noteBuf, ",", sBuf
                    foreach sBuf
                        triggerKey(cnt) = int(sBuf(cnt))
                        triggerKeyPush(cnt) = 0
                    loop
                    swbreak
                // darkBlend
                case 6
                    darkBlend = int(noteBuf)
                    swbreak
                // fontSize
                case 7
                    fontSize = int(noteBuf)
                    swbreak
            swend
        loop
    }
}

//      app.dat
notesel appDatContents
exist APPDAT
appPath = ""
if (strSize == -1) {
    notesave APPDAT
} else {
    noteload APPDAT
    if (appDatContents == "") {
        end
    } else {
        sdim appPath, notemax
        sdim appName, notemax
        repeat notemax
            noteget noteBuf, cnt
            // hoken
            if (noteBuf == "") { break }
            split noteBuf, "|", appPath(cnt), appName(cnt)
        loop
    }
}

// load icon
appNum = length(appPath)
dim iconHandle, appNum
repeat appNum
    ExtractIcon hInstance, appPath(cnt), 0
    IconHandle(cnt) = stat
    if (stat == 0) : dialog "loading failed."
loop

appR = (0.05*appNum + 0.1) * cy
launcherMsgPos = cy + appR + (iconHalfSize*2 + bigIconSize/2) + 10

khHookLL *onKeyHook

// screen
bgscr 0, dx, dy, screen_hide, 0, 0  // main
buffer 1, dx, dy                    // for screen shot
buffer 2, dx, dy                    // for blended screen
buffer 3, dx, dy                    // for colored screen
    dim appColor, appNum
    repeat appNum
        DrawIcon hdc, 0, 0, IconHandle(cnt)
        pos 0, 0 : gzoom 1, 1, 3, 0, 0, 32, 32, 1
        pget 0, 0
        appColor(cnt) = ginfo_r << 16 | ginfo_g << 8 | ginfo_b
    loop
buffer 4                            // for drawing icon
buffer 5                            // for resizing icon
buffer 6, dx, dy                    // for dark screen
    color : boxf

gsel 0, 0

goto *main

// label
*main
    gosub *showing
    await
    goto *main

*onKeyHook
    // press esc to exit
    if (khKeyCode == 27) { end }
    // trigger key check
    foreach triggerKey
        if (khKeyCode == triggerKey(cnt)) {
            if (khStat == 0) {  // pushed
                triggerKeyPush(cnt) = 1
            } else : if (khStat == 2) {  // released
                triggerKeyPush(cnt) = 0
            }
        }
    loop
    keyPushAnd = 1
    keyPushOr = 0
    foreach triggerKeyPush
        if (triggerKeyPush(cnt)) {
            keyPushAnd = keyPushAnd and 1
            keyPushOr = keyPushOr or 1
        } else {
            keyPushAnd = keyPushAnd and 0
            keyPushOr = keyPushOr or 0
        }
    loop
    if ((keyPushAnd == 1) and (keySwitch == 0)) {
        keySwitch = 1
    } else : if ((keyPushOr == 0) and (keySwitch == 1)) {
        keySwitch = 0
    }
    return

*showing
    redraw 0
        if (keySwitch == 0) {
            transition = -1
            gsel 0, -1
            if (selecting != -1) {
                exec appPath(selecting)
                selecting = -1
            }
        } else : if (keySwitch == 1) {
            if (transition == -1) {
                // screen shot
                gsel 1, 0
                hdcScreen = CreateDC("DISPLAY", 0, 0, 0)
                BitBlt hdc, 0, 0, dx, dy, hdcScreen, 0, 0, SRCCOPY | CAPTUREBLT
                DeleteDC hdcScreen
                // copy to screen 0
                gsel 0, 0
                gmode
                pos 0, 0 : gcopy 1, 0, 0, dx, dy
                // show screen 0
                transition = 0
                gsel 0, 2
            }
            if (transition <= blurDepth) {
                // blur
                gsel 0, 0
                gmode gmode_alpha, dx, dy, blurBlend
                pos 1, 0 : gcopy 0, 0, 0, dx, dy
                pos 0, 0 : gcopy 0, 2, 0, dx, dy
                pos 0, 1 : gcopy 0, 0, 0, dx, dy
                pos 0, 0 : gcopy 0, 0, 2, dx, dy
                // blend dark screen
                gmode gmode_alpha, dx, dy, darkBlend
                pos 0, 0 : gcopy 6, 0, 0, dx, dy
                // copy to buffer 1
                gsel 1, 0
                gmode
                pos 0, 0 : gcopy 0, 0, 0, dx, dy
                gsel 0, 0
                mouse cx, cy
                transition++
            } else : if (transition > blurDepth) {
                // detect app selection
                if (pR(mousex-cx, mousey-cy) >= appR) {
                    if ((cAng(appNum*2, appNum*2-1) < mouseRad) | (mouseRad < cAng(appNum*2, 1))) {
                        selecting = 0
                    } else {
                        repeat appNum-1
                            if ((cAng(appNum*2, cnt*2+1) < mouseRad) & (mouseRad < cAng(appNum*2, cnt*2+3))) { selecting = cnt + 1 }
                        loop
                    }
                } else { selecting = -1 }
                // screen blend
                gsel 0, 0
                gmode
                pos 0, 0 : gcopy 1, 0, 0, dx, dy
                // draw center circle
                color $80, $80, $80
                circle cx-appR, cy-appR, cx+appR, cy+appR, 0
                color $ff, $ff, $ff
                mouseRad = pT(mousex-cx, mousey-cy)
                mouseViewR = 0.6 * cy
                // draw info (debug)
                font msgothic, 16
                pos 0,   0 : mes "mouse = (" + mousex + ", " + mousey + ")"
                pos 0,  20 : mes "ginfo_disp = (" + dx + ", " + dy + ")"
                pos 0,  40 : mes "polar R = " + pR(mousex-cx, mousey-cy)
                pos 0,  60 : mes "polar T = " + mouseRad
                pos 0,  80 : mes "selecting = " + selecting
                pos 0, 100 : mes "appR = " + appR
                // draw center to mouse position
                ;line cx, cy, mousex, mousey
                if (selecting == -1) {
                    repeat appNum
                        // draw icon
                        DrawIcon hdc, cx-iconHalfSize + pCos(cAng(appNum, cnt))*appR, cy-iconHalfSize + pSin(cAng(appNum, cnt))*appR, IconHandle(cnt)
                        // draw separation line
                        line cx + pCos(cAng(appNum*2, cnt*2-1))*(appR-sepHalfLength), cy + pSin(cAng(appNum*2, cnt*2-1))*(appR-sepHalfLength), cx + pCos(cAng(appNum*2, cnt*2-1))*(appR+sepHalfLength), cy + pSin(cAng(appNum*2, cnt*2-1))*(appR+sepHalfLength)
                    loop
                    // draw message
                    font msgothic, fontSize
                    color $90, $90, $90
                    pos cx-fontSize/2*29/2, launcherMsgPos : mes "right click to enter settings"
                } else {  // app selecting view
                    // preparing to draw big icon
                    gsel 4, 0
                    color : boxf
                    DrawIcon hdc, 0, 0, IconHandle(selecting)
                    gsel 5, 0
                    gzoom iconHalfSize*2+bigIconSize, iconHalfSize*2+bigIconSize, 4, 0, 0, iconHalfSize*2, iconHalfSize*2, 1
                    gsel 3, 0
                    ;hsvcolor 192/appNum * selecting, 255, 255 : boxf
                    color appColor(selecting) >> 16, appColor(selecting) >> 8 & 0xFF, appColor(selecting) & 0xFF : boxf
                    
                    gsel 0, 0
                    // blend background color
                    gmode gmode_alpha, dx, dy, selectingBlend
                    pos 0, 0 : gcopy 3, 0, 0, dx, dy
                    // draw big icon
                    gmode gmode_rgb0
                    pos cx-iconHalfSize-bigIconSize/2 + pCos(cAng(appNum, selecting))*appR, cy-iconHalfSize-bigIconSize/2 + pSin(cAng(appNum, selecting))*appR
                    gcopy 5, 0, 0, iconHalfSize*2+bigIconSize, iconHalfSize*2+bigIconSize
                    // draw message
                    font msgothic, fontSize
                    color $FF, $FF, $FF
                    pos cx-fontSize/2*strlen(appName(selecting))/2, launcherMsgPos : mes appName(selecting)
                    // draw selecting line
                    ;color $40, $40, $40
                    ;line cx, cy, cx + pCos(cAng(appNum*2, selecting*2-1))*appR, cy + pSin(cAng(appNum*2, selecting*2-1))*appR
                    ;line cx, cy, cx + pCos(cAng(appNum*2, selecting*2+1))*appR, cy + pSin(cAng(appNum*2, selecting*2+1))*appR
                }
            }
        }
    redraw 1
    return