#module
//  ----- DLL Loading -----
    #uselib "shell32"
        #func ExtractIcon "ExtractIconA"    int, sptr, int
    
    #uselib "user32"
        #func DrawIcon "DrawIcon"           int, int, int, int

    
//  Util
    #define global VARTYPE_STR  2
    #define global VARTYPE_INT  4
    #define global arrAdd(%1, %2) %1(length(%1)) = %2

    #defcfunc lSearch array a, int i
        foreach a
            if (a(cnt) == i) { return cnt }
        loop
        return -1

    #deffunc arrDel array a, int i, int t
        n = length(a) - 1
        dimtype arr, t, n
        ic = 0
        foreach a
            if (cnt == i) {
                continue
            } else {
                arr(ic) = a(cnt)
            }
            ic++
        loop
        dimtype a, t, n
        foreach arr
            a(cnt) = arr(cnt)
        loop
        return
    
    
//  Trigger Key
    #deffunc initKey str readStr
        rs = readStr
        split rs, ",", sBuf
        keyNum = length(sBuf)
        dim triggerKey, keyNum
        sdim triggerKeyName, 50, keyNum
        dim triggerKeyPush, keyNum
        foreach sBuf
            split sBuf(cnt), ":", iBuf, triggerKeyName(cnt)
            triggerKey(cnt) = int(iBuf)
        loop
        return
    
    #deffunc addKey int add_key, str add_keyName
        if ((add_key != -1) and (lSearch(triggerKey, add_key) == -1)) {
            arrAdd triggerKey, add_key
            arrAdd triggerKeyName, add_keyName
            arrAdd triggerKeyPush, 0
            keyNum++
            return 1
        }
        return 0
    
    #deffunc delKey int del_keyIndex
        if ((del_keyIndex != -1) and (del_keyIndex < keyNum) and (keyNum > 1)) {
            arrDel triggerKey, del_keyIndex, VARTYPE_INT
            arrDel triggerKeyName, del_keyIndex, VARTYPE_STR
            dim triggerKeyPush, keyNum-1
            keyNum--
            return 1
        }
        return 0

    #defcfunc getKeyNum
        return keyNum
    

//  App
    #deffunc initApp str appDat, int pgs
        procGsel = pgs
        notesel appDat
        appNum = notemax
        sdim appPath, 260, appNum
        sdim appName, 100, appNum
        dim hAppIcon, appNum
        dim appColor, appNum
        repeat appNum
            noteget noteBuf, cnt
            if (noteBuf == "") { break }
            split noteBuf, "|", appPath(cnt), appName(cnt)
            hAppIcon(cnt) = calcHAppIcon(appPath(cnt))
            appColor(cnt) = calcAppColor(appPath(cnt), hAppIcon(cnt))
        loop
        return

    #deffunc addApp str add_path, str add_name
        arrAdd appPath, add_path
        arrAdd appName, add_name
        appNum++
        return
    
    #deffunc delApp int del_appIndex
        if (appNum <= 1) { return 0 }
        arrDel appPath, del_appIndex, VARTYPE_STR
        arrDel appName, del_appIndex, VARTYPE_STR
        arrDel hAppIcon, del_appIndex, VARTYPE_INT
        arrDel appColor, del_appIndex, VARTYPE_INT
        appNum--
        return 1
    
    #defcfunc getAppNum
        return appNum

    // internal
    #defcfunc calcHAppIcon str hIcon_path
        ExtractIcon hInstance, hIcon_path, 0
        return stat

    #defcfunc calcAppColor str color_path, int color_hIcon
        nowGsel = ginfo_sel
        gsel procGsel
        DrawIcon hdc, 0, 0, color_hIcon
        pos 0, 0 : gzoom 1, 1, 3, 0, 0, 32, 32, 1
        pget 0, 0
        return (ginfo_r << 16 | ginfo_g << 8 | ginfo_b)

#global


end